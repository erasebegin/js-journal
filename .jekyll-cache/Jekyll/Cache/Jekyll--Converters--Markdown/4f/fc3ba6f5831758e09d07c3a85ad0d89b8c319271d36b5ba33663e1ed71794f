I"Ï<p><strong>The Challenge:</strong></p>

<p>Fill in the <code class="highlighter-rouge">urlSlug</code> function so it converts a string <code class="highlighter-rouge">title</code> and returns the hyphenated version for the URL. You can use any of the methods covered in this section, and don‚Äôt use replace. Here are the requirements:</p>
<ul>
  <li>The input is a string with spaces and title-cased words</li>
  <li>The output is a string with the spaces between words replaced by a hyphen (-)</li>
  <li>The output should be all lower-cased letters</li>
  <li>The output should not have any spaces</li>
</ul>

<p><strong>My Solution:</strong></p>

<p>I guess the first step will be converting <code class="highlighter-rouge">title</code> to lower case since that‚Äôs very easy to do using <code class="highlighter-rouge">toLowerCase()</code>.</p>

<p>And now, <em>without</em> replace, I need to replace the spaces with hyphens‚Ä¶.. hmm. It is recommended that I use map/filter/reduce etc to try and solve this so I‚Äôll need to think this through‚Ä¶. maybe I can use <code class="highlighter-rouge">split()</code> to convert the whole string to an array of characters and then‚Ä¶</p>

<p>do something.</p>

<p>?</p>

<p><code class="highlighter-rouge">filter()</code> will only return the values that I want to replace‚Ä¶ that doesn‚Äôt seem very useful. Perhaps <code class="highlighter-rouge">map()</code> is what I need.</p>

<p>Yeeeeessss, according to <a href="https://codeburst.io/learn-understand-javascripts-map-function-ffc059264783">this excellent tutorial</a> I can use conditions with <code class="highlighter-rouge">map()</code>. I will use the ternary operator as in the example in order to get some practice writing the syntax for this kind of conditional statement.</p>

<p>I spent some time scratching my head because <code class="highlighter-rouge">map()</code> wasn‚Äôt functioning in the way I expected, but I eventually realised that it‚Äôs because strings can‚Äôt be worked on like arrays. I thought that because string[3] returns a character in the string, that I didn‚Äôt have to use <code class="highlighter-rouge">split()</code> to work on it like an array. But after using split to break it into an array of individual characters, <code class="highlighter-rouge">map()</code> seems to be working.</p>

<p>Coooooool, so I did this:</p>

<p><code class="highlighter-rouge">const arr = title.toLowerCase().split('').map((x) =&gt; x === " " ? x = "-" : x );</code></p>

<p>And now I have exactly what I want, but as an array of single characters. I guess now I can just use <code class="highlighter-rouge">join()</code> to get them all together again!</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">var</span> <span class="nx">globalTitle</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Winter Is Coming</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">urlSlug</span><span class="p">(</span><span class="nx">title</span><span class="p">)</span> <span class="p">{</span>

  <span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">title</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="dl">''</span><span class="p">).</span><span class="nx">map</span><span class="p">((</span><span class="nx">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">===</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="p">?</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">-</span><span class="dl">"</span> <span class="p">:</span> <span class="nx">x</span> <span class="p">);</span>

  <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">''</span><span class="p">)</span>

<span class="p">}</span>

<span class="kd">var</span> <span class="nx">winterComing</span> <span class="o">=</span> <span class="nx">urlSlug</span><span class="p">(</span><span class="nx">globalTitle</span><span class="p">);</span> 

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">winterComing</span><span class="p">)</span>
</code></pre></div></div>

<p>Okay so this works fine for all test cases <em>except</em> this one:  ‚Äú  Winter Is   Coming‚Äù</p>

<p>In this case the output would be ‚Äú‚Äìwinter-is‚Äìcoming‚Äù</p>

<p>I think the solution here is again regex, but this seems quite complicated. In the case of changing 2 or more spaces to 1, I can use my method from the previous problem (<code class="highlighter-rouge">/\s+/g</code>). But getting rid of leading spaces might need to be a separate operation altogether.</p>

<p>Although it seems antiquated, I want to try removing the leading space(s) using a while loop that will delete characters until it reaches an alphabet character and then it will break out of the loop. I would prefer to use forEach  or something like that, but I can‚Äôt think how that would work.</p>
:ET